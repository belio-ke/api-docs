{
  "openapi": "3.1.0",
  "info": {
    "title": "Belio API",
    "description": "OpenAPI Specification for Belio's REST API",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://stage-api.belio.co.ke",
      "description": "API Server"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/realms/api-dev/protocol/openid-connect/token": {
      "servers": [
        {
          "url": "https://keycloak.belio.co.ke",
          "description": "Authorization Server"
        }
      ],
      "post": {
        "security": [],
        "description": "Obtain an access token using client credentials flow",
        "requestBody": {
          "description": "Client authentication details",
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "client_id": {
                    "type": "string",
                    "description": "The client identifier"
                  },
                  "client_secret": {
                    "type": "string",
                    "description": "The client secret"
                  },
                  "grant_type": {
                    "type": "string",
                    "enum": ["client_credentials"],
                    "default": "client_credentials"
                  }
                },
                "required": ["client_id", "client_secret", "grant_type"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful token response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          },
          "404": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          }
        }
      }
    },
    "/service": {
      "get": {
        "description": "Retrieve a list of available messaging services",
        "responses": {
          "200": {
            "description": "List of available messaging services",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid authentication credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    },
    "/message/{serviceId}": {
      "post": {
        "description": "Send a message to one or multiple recipients",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique identifier for the messaging service"
          }
        ],
        "requestBody": {
          "description": "Message details for sending to one or multiple recipients",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "title": "SendToEach",
                    "description": "Send message to a single recipient",
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": ["SendToEach"],
                        "description": "Indicates sending to a single recipient"
                      },
                      "messages": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "text": {
                              "type": "string",
                              "description": "Message content to be delivered. Cannot be empty"
                            },
                            "phone": {
                              "type": "string",
                              "description": "Recipient's phone number e.g +254712345678, 25412345678, 0712345678. Cannot be empty"
                            }
                          },
                          "additionalProperties": false
                        },
                        "description": "Messages and recipients"
                      },
                      "receiptRequest": {
                        "type": "object",
                        "properties": {
                          "correlator": {
                            "type": "string",
                            "description": "Client-provided identifier for correlation"
                          },
                          "callbackUrl": {
                            "type": "string",
                            "format": "uri",
                            "description": "URL for delivery receipt callbacks"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "required": ["type", "address", "message"]
                  },
                  {
                    "title": "SendToMany",
                    "description": "Send message to multiple recipients",
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": ["SendToMany"],
                        "description": "Indicates sending to multiple recipients"
                      },
                      "message": {
                        "type": "string",
                        "description": "Message content to be delivered to all recipients. Cannot be empty"
                      },
                      "addresses": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "List of recipients' phone numbers e.g [+254712345678, 25412345678, 0712345678]. Cannot be empty"
                      },
                      "receiptRequest": {
                        "type": "object",
                        "properties": {
                          "correlator": {
                            "type": "string",
                            "description": "Client-provided identifier for correlation"
                          },
                          "callbackUrl": {
                            "type": "string",
                            "format": "uri",
                            "description": "URL for delivery receipt callbacks"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "required": ["type", "addresses", "message"]
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Message(s) sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageSendResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid authentication credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "403": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "404": {
            "description": "Authentication error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          },
          "429": {
            "description": "Rate limit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "TokenResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "The access token. This is used as a bearer token in the Authorization header of requests to the API."
          },
          "expires_in": {
            "type": "integer",
            "format": "int32",
            "description": "Lifetime of the access token in seconds"
          },
          "refresh_expires_in": {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "Lifetime of the refresh token in seconds"
          },
          "token_type": {
            "type": "string",
            "enum": ["Bearer"],
            "description": "Type of the token"
          },
          "not-before-policy": {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "Not Before Policy time"
          },
          "scope": {
            "type": "string",
            "default": "profile email",
            "description": "Scopes associated with the token"
          }
        }
      },
      "ServicesResponse": {
        "type": "object",
        "properties": {
          "desc": {
            "type": "object",
            "description": "The response",
            "properties": {
              "result": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier for the service"
                    },
                    "serviceName": {
                      "type": "string",
                      "description": "Name of the service"
                    },
                    "productType": {
                      "type": "string",
                      "enum": [
                        "SMS",
                        "USSD",
                        "AIRTIME",
                        "DATA_BUNDLE",
                        "WHATSAPP"
                      ],
                      "description": "Type of product associated with the service e.g SMS"
                    },
                    "teamId": {
                      "type": "string",
                      "description": "Identifier for the team associated with the service"
                    },
                    "status": {
                      "type": "string",
                      "enum": ["Draft", "Active", "Offline", "Suspended"],
                      "default": "Draft",
                      "description": "Status of the service"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the service was created"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the service was last updated",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      },
      "MessageSendResponse": {
        "type": "object",
        "properties": {
          "desc": {
            "type": "object",
            "description": "The response",
            "properties": {
              "requestId": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the message request"
              },
              "units": {
                "type": "integer",
                "description": "Number of credit units consumed by the request"
              },
              "addresses": {
                "type": "integer",
                "description": "Number of recipient addresses processed"
              }
            }
          }
        }
      },
      "AuthError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "error_description": {
            "type": "string"
          }
        }
      },
      "APIError": {
        "type": "object",
        "properties": {
          "desc": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
